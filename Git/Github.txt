Workind directory: Es donde se trabajan todos los archivos
Stating area: Es la etapa previa a al guardado de archivos
Repositiry: Es donde se almacenan los archivos
COMANDOS:
git init ---> Crea un proyecto o se aplica git sobre un proyecto existente
git add ----> Pasa los archivos del working directory al stating area
git add . ---> Agregar todos los archivos al stating area
git status ---> Muestra en que estado el archivo
git commit ---> Pasa los archivos del stating area al respository
git commit -m "He agregado un gitignore" ---> Realiza un commit con un comentario
git push ---> Sube los archivos a un repositorio remoto
git pull ---> Muestra los cambios hechos
git log ---> Para ver todos los commits que hemos creado
git clone ---> Hace una copia desde el servidor al equipo
git checkoreut -- app.js ---> Elimina los cambios realizados
git diff "file" ---> Muestra los cambios que se han realizado en los archivos
git branch ---> Muestra la rama en la que se encuentra
git branch login---> Crea una nueva rama llamada login
git chekocut login ---> Se traslata a la rama login
git config --global user.email "email@email.com"
git config --global user.name "Miguel"
git config --list ---> Ver credenciales

git commit
i para poder escribir
esc y ":wq"

.gitignore
En esta archivo se deben guardar los nombres de las carpetas que se quieren ignorar,
pero de igual manera ahi que añadirla al stating area

git remote add origin https://github.com/Elmigue10/Primer-repositorio.git
Este comando indica en que repositorio remoto se almacenara el codigo
git push -u origin master
Este comando almacena el codigo en el repositorio remoto 

git clone url
Descarga el codigo del repositorio automaticamente.

PASOS EN ORDEN
git init
git add .
git status
git commit -m "primer avance"
git remote add origin https://github.com/Elmigue10/Ingenieria-web-1.git
git push -u origin master


Una de las posibles formas de trabajar en git, para evitar problemas sería siguiendo este flujo:
Descargo el repo con git clone
Creo una rama local en la que trabajo git checkout -b mi_rama_local y voy añadiendo commits a esa rama, hasta que la feature o el bug está resuelto.
Vas a master con git checkout master y te traes los posibles cambios que haya en remoto git pull
Vas a la rama local con git checkout mi_rama_local e integras en ella los nuevos cambios de master con git rebase master. Esto metería los cambios en master por debajo de tus cambios actuales por decirlo de alguna forma. Esto evita los commits vacíos de "merge". A algunos equipos le gustan tener esos commits para saber cuando se integro y a otros no. A mi particularmente me resultan molestos. por eso lo hago así.
Si hay algún conflicto lo resuelves
Cambias a master y te traes los cambios de la rama local git merge mi_rama_local
Subes los cambios git push origin master
Si has estado trabajando en master directamente, lo que alguna gente considera una mala práctica, puedes intentar traerte los cambios remotos directamente por debajo de tus cambios locales con git pull --rebase, resolver los conflictos y hacer git push


Git status -> Mirar si tienes modificaciones tuyas y si existe algún pull o push
Git fetch -> Por si acaso tus ramas no se han actualizado correctamente, esto NO actualiza los ficheros de las ramas, sólo el estado de esa rama
Git status -> Para verificar de nuevo modificaciones, pull y pushs
Git pull -> Ahora sí descargas las actualizaciones
Git add/commit/... -> Ahora guardas tus modificaciones
Git status -> Miras que siga sin necesitar un pull, por si las moscas
Git push -> Subes tus datos
Git status -> Compruebas que está todo correctamente

Para el proyecto buen gusto, solo trabaje en la rama local, checkout a master, merge miguel y push.
git pull en master,git checkout rama_loca, git rebase master 
En la rama local -> git add, git commit, git push rama_local
luego cambiar a master
git merge rama_local, git commit, git push