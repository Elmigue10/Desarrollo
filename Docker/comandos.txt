docker run hello-world
docker images -> Muestra las imagenes
docker pull ubuntu -> Instala una imagen
docker run ubuntu echo "hello world"
docker run -it id-contenedor bash -> Ejecuta el bash de ubuntu de una manera iterativa, es decir, que no se cierra de golpe
ctrl + d -> Salir de la ejecucición
docker ps -> Muestra la ejecucion de la imagen que hemos instalado, es decir, podemos ejecutar una imagen varias veces y cada una tendra un ID
docker ps -a -> Historial de ejecuciones
docker rm ID -> Elimina un contenedor
docker rim NOMBRE -> Elimina un contenedor
docker start ID ó NOMBRE -> Arranca de nuevo un contenedor
docker stot ID ó NOMBRE -> Para un contenedor
docker run -p 3000:80 nginx -> Corre la imagen en el puerto 3000 del computador
docker run -p 80:80 -d nginx -> Corre la imagen sin que la consola se desactive
docker ps -aq -> Muestra solo los ID
docker rm $(docker ps -aq)
docker run -p 80:80 -p 3000:80 -d nginx -> Corre varias imagenes al tiempo
docker run -d -p 3306:3306 --name mydatabase mysql -> Le coloca un nombre a la imagen
docker run -d -p 3306:3306 --name mydatabase mysql MYSQL_ROOT_PASWORD=contraseñ mysql -> Coloca una variable de entorno
docker run -d -p 80:80 -p 3000:80 --name servers nginx
docker rm mydatabase -f -> fuerza el eliminado aunque se encuentre en ejecución
docker ps --format="ID\t{{.ID}}"
docker ps --format="ID:\t{{.ID}}"\nNombre:\t{{.Names}} -> Les da formato al listado de los contenedores
docker rmi hello-world -> Borra una imagen
docker images -aq -> Devuelve el ID de las imagenes instaladas
docker run -d -p 80:80 --name website -v c/Users/Admin/Documents/Programacion/Docker/website:/usr/share/nginx/html nginx
docker run -d -p 80:80 --name website -v c/Users/Admin/Documents/Programacion/Docker/website:/usr/share/nginx/html:ro nginx
docker exec -it website bash
docker build -t migueltest .

UBUNTU
docker pull ubuntu -> Instala una imagen
docker run ubuntu echo "hello world"
docker run -it id-contenedor bash -> Ejecuta el bash
docker cp origen/arhivo destino -> docker cp b0693903e303:/home/docker/juniperfeats.png C:\Users\Miguel\Documents\UMB

REDIS
docker pull redis
docker run --name some-redis -d redis:versión
docker run -d -p 6379:6379 --name redis redis:6.0
docker exec -it id-contenedor redis-cli

PROCESOS / PUERTOS
netstat -aon | findstr 6379
netstat -aon
taskkill /F /PID numero-proceso

POSTGRESQL
docker pull postgres
docker run --name postgresdb -d -p 5432:5432 -e POSTGRES_PASSWORD=admin postgres
docker exec -it id-contenedor psql -U postgres

DOCKERIZAR SPRING BOOT APP
https://www.baeldung.com/dockerizing-spring-boot-application
https://medium.com/swlh/spring-boot-with-docker-2467db187fa2
Construir el Dockerfile
mvn clean install
docker build -t nombre-de-la-imagen .
docker run --name nombre-del-contenedor -p 8080:8080 -d nombre-de-la-imagen
docker network connect nombre-de-la-red nombre-del-contenedor
docker logs nombre-del-contenedor
